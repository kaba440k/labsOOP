import os
import asyncio
import logging
import requests
import yt_dlp
from aiogram import F, Router, types, Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –¢–æ–∫–µ–Ω—ã API
IMAGE_TOKEN = "YOUR_IMAGE_TOKEN"
BOT_TOKEN = 'YOUR_TOKEN'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot_instance = Bot(token=BOT_TOKEN)
dispatcher = Dispatcher()
bot_router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', callback_data='create_image')],
    [InlineKeyboardButton(text="üé∂ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É", callback_data='search_music')],
    [InlineKeyboardButton(text="üîó –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞", callback_data='project_url')]
])

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class UserState(StatesGroup):
    waiting_for_prompt = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    waiting_for_audio = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot_router.message(CommandStart())
async def on_start(message: Message):
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? ü§î",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ GitHub
@bot_router.callback_query(F.data == 'project_url')
async def redirect_to_github(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://github.com/kaba440k/labsOOP.git', reply_markup=main_keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
async def download_audio_by_query(query: str) -> str:
    if not os.path.exists('downloads'):
        os.makedirs('downloads')

    download_options = {
        'format': 'bestaudio/best',
        'extractaudio': True,
        'audioformat': 'mp3',
        'outtmpl': f'downloads/{query}.mp3',
    }

    try:
        with yt_dlp.YoutubeDL(download_options) as ydl:
            search_results = ydl.extract_info(f"ytsearch:{query}", download=True)
            if search_results['entries']:
                audio_path = f"downloads/{query}.mp3"
                return audio_path if os.path.exists(audio_path) else None
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É"
@bot_router.callback_query(F.data == 'search_music')
async def request_audio_query(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏. üé∂")
    await state.set_state(UserState.waiting_for_audio)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot_router.message(UserState.waiting_for_audio)
async def process_audio_request(message: types.Message, state: FSMContext):
    audio_file_path = await download_audio_by_query(message.text)
    if audio_file_path and os.path.exists(audio_file_path):
        with open(audio_file_path, 'rb') as audio_file:
            audio_file_io = FSInputFile(audio_file_path)
            await state.clear()
            await message.answer_audio(
                audio=audio_file_io,
                caption="–í–æ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
                reply_markup=main_keyboard
            )
        os.remove(audio_file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∞—É–¥–∏–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
@bot_router.callback_query(F.data == "create_image")
async def request_image_query(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. üñº")
    await state.set_state(UserState.waiting_for_prompt)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot_router.message(UserState.waiting_for_prompt)
async def process_image_request(message: Message, state: FSMContext):
    user_query = message.text.strip()
    image_url = fetch_image_url(user_query)

    if image_url:
        await message.answer_photo(
            photo=image_url,
            caption="–í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
            reply_markup=main_keyboard
        )
    else:
        await message.reply(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
            reply_markup=main_keyboard
        )
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ API Unsplash
def fetch_image_url(query: str) -> str:
    api_url = f"https://api.unsplash.com/photos/random?query={query}&client_id={IMAGE_TOKEN}"
    response = requests.get(api_url)
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    data = response.json()
    return data.get("urls", {}).get("regular", "")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def run_bot():
    dispatcher.include_router(bot_router)
    await dispatcher.start_polling(bot_instance)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(run_bot())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
